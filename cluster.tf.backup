variable "prefix" {
  description = "Used for naming instances in AWS (e.g. test)"
  default = "test"
}

variable "aws_access_key_id" {
  description = "AWS Access Key ID"
  sensitive   = true
}

variable "aws_secret_access_key" {
  description = "AWS Secret Access Key"
  sensitive   = true
}

variable "ssh_key_name" {
  description = "Name of existing AWS key pair to use (e.g. default)"
  default = "devops-test"
}

variable "postgres_instance_count" {
  description = "Number of postgres nodes to launch"
  default = 1
}

variable "restapi_instance_count" {
  description = "Number of public postgres nodes to launch"
  default = 1
}

variable "region" {
  default = "sa-east-1"
}

# availability zones
# use "aws ec2 describe-availability-zones --region us-east-1"
# to figure out the name of the AZs on every region
variable "azs" {
  default = {
    "sa-east-1" = "sa-east-1a,sa-east-1b"
  }
}

variable "amis" {
  default = {
     sa-east-1 = "ami-054a31f1b3bf90920"
  }
}

variable "postgres_type" { default = "t3a.small" }
variable "restapi_type" { default = "t3a.small" }
variable "postgres_volume_size" { default = "15" }
variable "restapi_volume_size" { default = "15" }

variable "subnet_range" { default = "172.31.0.0/16" }

provider "aws" {
  access_key = var.aws_access_key_id
  secret_key = var.aws_secret_access_key
  region = var.region
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "2.64.0"

  name = "test-vpc"

  cidr = "10.1.0.0/16"

  azs             = ["sa-east-1a", "sa-east-1b", "sa-east-1c"]
  private_subnets = ["10.1.1.0/24", "10.1.2.0/24", "10.1.3.0/24"]
  public_subnets  = ["10.1.101.0/24", "10.1.102.0/24", "10.1.103.0/24"]

  map_public_ip_on_launch = true

  enable_dns_hostnames   = true
  enable_dns_support     = true
  enable_nat_gateway     = true
  enable_vpn_gateway     = true
  single_nat_gateway     = true
  one_nat_gateway_per_az = false
}

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow SSH inbound traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description = "SSH from VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
#    cidr_blocks = [module.vpc.vpc_cidr_block]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_ssh"
  }
}


resource "aws_security_group" "allow_postgres" {
  name        = "allow_postgres"
  description = "Allow postgres  inbound traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description = "postgres from VPC"
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = [module.vpc.vpc_cidr_block]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_postgres"
  }
}

resource "aws_security_group" "allow_restapi" {
  name        = "allow_restapi"
  description = "Allow restapi inbound traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description = "restapi from VPC"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_restapi"
  }
}

resource "aws_spot_instance_request" "postgres" {
  ami                    = var.amis
  instance_type          = var.postgres_type
  spot_type              = "one-time"
  block_duration_minutes = "120"
  wait_for_fulfillment   = "true"
  key_name               = var.ssh_key_name
  security_groups = [aws_security_group.allow_ssh.id,aws_security_group.allow_postgres.id]
  subnet_id = "${aws_subnet.subnet-uno.id}"
}

module "postgres" {
  source ="./terraform/aws/instance"
  instance_name = var.prefix-postgres
  instance_count = var.postgres_instance_count
  amis = var.amis
  azs = var.azs
  region = var.region
  key_name = var.ssh_key_name
  vpc_security_group_ids = [aws_security_group.allow_ssh.id,aws_security_group.allow_postgres.id]
  subnets = module.vpc.subnets
  instance_type = var.postgres_type
  volume_size = var.postgres_volume_size
}

module "restapi" {
  source ="./terraform/aws/instance"
  instance_name = var.prefix-restapi
  instance_count = var.restapi_instance_count
  amis = var.amis
  azs = var.azs
  region = var.region
  key_name = var.ssh_key_name
  vpc_security_group_ids = [aws_security_group.allow_ssh.id,aws_security_group.allow_restapi.id]
  subnets = module.vpc.subnets
  instance_type = var.restapi_type
  volume_size = var.restapi_volume_size
}

output "postgres_public_ips" { value = module.postgres.public_ips }
output "restapi_public_ips" { value = module.restapi.public_ips }
output "prefix" { value = var.prefix }
